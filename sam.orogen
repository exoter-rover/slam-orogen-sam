name "sam"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
#using_library "gtsam" # Localization library
using_library "envire_core" # Environment representation library
using_library "envire_sam" # Environment representation with Smoothing and Mapping library

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "base"
import_types_from "envire_sam/Configuration.hpp"
import_types_from "samTypes.hpp"

# Declare the State Optimization class
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #**************************
    #***** Task Properties ****
    #**************************
    property('sam_localization_source_frame', '/std/string').
        doc 'Frame of the SAM localization (normally "sam" frame)'+
            'The SAM localization target frame is taken from the world frame of the transformer.'

    property('odometry_localization_source_frame', '/std/string').
        doc 'Frame of the Odometry localization (normally "body" frame)'+
            'The odometry localization target frame is taken from the last SAM localization source frame.'

    property('error_per_distance_traveled', 'double').
        doc 'Unit error per distance traveled (0 - 1).'

    property('distance_segment', 'double').
        doc 'Minimum distance (in meters) to set a new node for the optimization.'

    #*********************************
    #***** Point Cloud Properties ****
    #*********************************
    property('sensor_point_cloud_height', 'int').
	doc 'PCL Point clouds needs to be organized. It will take this property to organize them.'

    property('sensor_point_cloud_width', 'int').
	doc 'PCL Point clouds needs to be organized. It will take this property to organize them.'

    property("output_ply", "/std/string", "").
	doc "resulting ply file"

    property('bfilter_config', 'envire::sam::BilateralFilterParams').
	doc 'Configuration parameters for Bilateral filter.'

    property('outlier_config', 'envire::sam::OutlierRemovalParams').
	doc 'Configuration parameters for Radius Outlier Removal filter.'

    #******************************
    #******* Input ports  *********
    #******************************
    input_port('delta_pose_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'Delta pose displacement.'

    input_port("point_cloud_samples",  'base::samples::Pointcloud').
        doc 'Point cloud samples.'

    ##########################
    # Transformer
    ##########################
    transformer do
        transform "navigation", "world" # navigation in world in "Source IN target" convention
        transform "sensor", "body" # sensor in body in "Source IN target" convention
    	align_port("delta_pose_samples", 0)
    	align_port("point_cloud_samples", 0)
    	max_latency(0.02)
    end

    #******************************
    #******* Output ports  ********
    #******************************
    output_port('sam_pose_samples_out', '/base/samples/RigidBodyState').
	    doc 'Corrected estimated robot pose from SAM.'

    output_port('odo_pose_samples_out', '/base/samples/RigidBodyState').
	    doc 'Corrected estimated robot pose with last odometry poses.'

    output_port("point_cloud_samples_out",  'base::samples::Pointcloud').
        doc 'Map point cloud samples.'

    property('output_debug', 'bool', false).
        doc "Set to true in case you want to have filter debug information"

    output_port('task_info_out', 'sam/Information').
    	doc 'Task SAM information to port out'

    port_driven

end

